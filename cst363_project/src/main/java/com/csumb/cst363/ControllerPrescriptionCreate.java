package com.csumb.cst363;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import javax.validation.ValidationException;


@Controller    
public class ControllerPrescriptionCreate {
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	/*
	 * Doctor requests blank form for new prescription.
	 */
	@GetMapping("/prescription/new")
	public String newPrescripton(Model model) {
		model.addAttribute("prescription", new Prescription());
		return "prescription_create";
	}
	
	/* 
	 * Process the new prescription form.
	 * 1.  Validate that Doctor SSN exists and matches Doctor Name.
	 * 2.  Validate that Patient SSN exists and matches Patient Name.
	 * 3.  Validate that Drug name exists.
	 * 4.  Insert new prescription.
	 * 5.  If error, return error message and the prescription form
	 * 6.  Otherwise, return the prescription with the rxid number that was generated by the database.
	 */
	@PostMapping("/prescription")
	public String newPrescription( Prescription p, Model model) {
		// Used to generate unique ten digit RXNumbers
		Random gen = new Random();
		List<Integer> randomNums = new ArrayList<>(999999);
		for (int i = 1; i < 999999; i++) {
			randomNums.add(i);
		}

		Collections.shuffle(randomNums, gen);
		int random_rx_number = 1000000000+randomNums.get(1);
		p.setRxid(random_rx_number);

		PreparedStatement ps;
		ResultSet rs;
		// TODO
		try (Connection con = getConnection();) {
			// Retrieve matching drugId based on user input
			int drugid = 0;
			ps = con.prepareStatement("select drugid from drug where tradeName = '" + p.getDrugName() + "' OR genericName = '" + p.getDrugName() + "'");
			rs = ps.executeQuery();
			while (rs.next()) {
				drugid = rs.getInt("drugid");
			}
			// Check for existence of entered drug name in db
			if (drugid == 0) {
				throw new SQLException("Drug not found. Please check drug name and resubmit.");
			}

			// Validate doctor ssn is a 9 digit number
			int doctorSsnLength = String.valueOf(p.getDoctor_ssn()).length();
			if (doctorSsnLength != 9) {
				throw new ValidationException("Doctor SSN must be a 9 digit number.");
			}

			// Validate patient ssn is a 9 digit number
			int patientSsnLength = String.valueOf(p.getPatient_ssn()).length();
			if (patientSsnLength != 9) {
				throw new ValidationException("Patient SSN must be a 9 digit number.");
			}

			// Retrieve matching doctorId based on user input
			int doctorId = 0;
			ps = con.prepareStatement("select doctorId from doctor where last_name = '" + p.getDoctorLastName() + "' AND first_name = '" + p.getDoctorFirstName() + "' AND ssn = '" + p.getDoctor_ssn() + "'");
			rs = ps.executeQuery();
			while (rs.next()) {
				doctorId = rs.getInt("doctorId");
			}
			if (doctorId == 0) {
				throw new SQLException("Doctor not found. Please check doctor details and resubmit.");
			}
			// Retrieve matching patientId based on user input
			int patientId = 0;
			ps = con.prepareStatement("select patientId from patient where last_name = '" + p.getPatientLastName() + "' AND first_name = '" + p.getPatientFirstName() + "' AND ssn = '" + p.getPatient_ssn() + "'");
			rs = ps.executeQuery();
			while (rs.next()) {
				patientId = rs.getInt("patientId");
			}
			// Check for existence of entered patient in db
			if (patientId == 0) {
				throw new SQLException("Patient not found. Please check patient details and resubmit.");
			}
			int quantity = p.getQuantity();

			// Validate quantity is a number between 1 and 120
			if (quantity < 1 || quantity > 120) {
				throw new ValidationException("Quantity must be a number between 1 and 120");
			}
			ps = con.prepareStatement("insert into doctor_prescription(RXnumber, drug_drugsid, quantity, datePrescribed, doctor_doctorId, patient_patientId) values( ?, ?, ?, ?, ?, ?)",
					Statement.RETURN_GENERATED_KEYS);
			ps.setInt(1, random_rx_number);
			ps.setInt(2, drugid);
			ps.setInt(3, p.getQuantity());
			ps.setString(4, new SimpleDateFormat("YYYY-MM-dd").format(new Date()));
			ps.setInt(5, doctorId);
			ps.setInt(6, patientId);

			ps.executeUpdate();
			rs = ps.getGeneratedKeys();

			// display message and patient information
			model.addAttribute("message", "Prescription created.");
			model.addAttribute("doctor_prescription", p);
			return "prescription_show";

		} catch (SQLException e) {
			model.addAttribute("message", "SQL Error: "+e.getMessage());
			model.addAttribute("doctor_prescription", p);
			return "prescription_create";
		}
		catch (ValidationException e) {
			model.addAttribute("message", "Validation Error: "+e.getMessage());
			model.addAttribute("doctor_prescription", p);
			return "prescription_create";
		}
	}
	
	/*
	 * return JDBC Connection using jdbcTemplate in Spring Server
	 */

	private Connection getConnection() throws SQLException {
		Connection conn = jdbcTemplate.getDataSource().getConnection();
		return conn;
	}
	
}
